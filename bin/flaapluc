#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Time-stamp: "2017-08-03 17:53:10 jlenain"

"""
FLaapLUC (Fermi/LAT automatic aperture photometry Light C<->Urve)

Automatic generation of aperture photometric light curves of
high energy sources, for a given source.

No likelihood fit is performed, the results solely rely on the
4FGL spectral fits, if available.

More information are available at:
http://fermi.gsfc.nasa.gov/ssc/data/analysis/scitools/aperture_photometry.html

@author Jean-Philippe Lenain <mailto:jlenain@in2p3.fr>
"""

import logging
import sys
from optparse import OptionParser

from flaapluc import automaticLightCurve as alc
from flaapluc.automaticLightCurve import processSrc


def main(argv=None):
    """
    Main procedure
    """

    # options parser:
    helpmsg = """%prog [options] <source> [<optional YYYYMM>]

Use '-h' to get the help message

"""

    parser = OptionParser(version="%prog v1.2.3",
                          usage=helpmsg)

    parser.add_option("-d", "--daily", action="store_true", dest="d", default=False,
                      help='use daily bins for the light curves (defaulted to long time-binned)')
    parser.add_option("--force-daily", action="store_true", dest="force_daily", default=False,
                      help='force daily bins for the light curves')
    parser.add_option("--force-alert", action="store_true", dest="force_alert", default=False,
                      help='force an alert to be issued. To be used along with --force-daily. For test purposes only.')
    parser.add_option("-c", "--custom-threshold", action="store_true", dest="c", default=False,
                      help='use custom trigger thresholds from the master list of sources (defaulted to 1.e-6 ph cm^-2 s^-1)')
    parser.add_option("-l", "--long-term", action="store_true", dest="l", default=False,
                      help='generate a long term light curve, for one given month (defaulted to False). With this option, one should provide a source name as usual, but also a month for which the data should be processed, in the format YYYYMM.')
    parser.add_option("-w", "--with-history", action="store_true", dest="history", default=False,
                      help='use the long-term history of a source to dynamically determine a flux trigger threshold, instead of using a fixed flux trigger threshold as done by default. This option makes use of the long-term data on a source, and assumes that these have been previously generated with the --merge-long-term option.')
    parser.add_option("-m", "--merge-long-term", action="store_true", dest="m", default=False,
                      help='merge the month-by-month long-term light curves together. If those do not exist, they will be created on the fly.')
    parser.add_option("-u", "--update", action="store_true", dest="u", default=False,
                      help='update with new data for last month/year when used in conjunction of --merge-long-term. Otherwise, has no effect.')
    parser.add_option("--stop-month", default=None, dest="STOPMONTH", metavar="<STOPMONTH>",
                      help="in conjunction with --merge-long-term, defines the stop year/month (in the format YYYYMM) until which the long-term light curve is generated. '%default' by default.")
    parser.add_option("--stop-day", default=None, dest="STOPDAY", metavar="<STOPDAY>",
                      help="defines the stop year-month-day (in the format YYYY-MM-DD) until which the short-term light curve is generated. '%default' by default.")
    parser.add_option("-n", "--no-mail", action="store_true", dest="n", default=False,
                      help='do not send mail alerts')
    parser.add_option("-t", "--test", action="store_true", dest="t", default=False,
                      help='for test purposes. Do not send the alert mail to everybody if a source is above the trigger threshold, but only to test recipients (by default, mail alerts are sent to everybody, cf. the configuration files).')
    parser.add_option("-f", "--config-file", default='default.cfg', dest="CONFIGFILE", metavar="CONFIGFILE",
                      help="provide a configuration file. Using '%default' by default.")
    parser.add_option("--log", default='info', dest="log", metavar="log",
                      help="log level to use. Using '%default' by default.")
    (opt, args) = parser.parse_args()

    CONFIGFILE = opt.CONFIGFILE

    if opt.log:
        LOG = opt.log.upper()
    else:
        LOG = logging.INFO

    # If forcing an alert to be issued
    if opt.force_alert:
        FORCEALERT = True
    else:
        FORCEALERT = False

    # If daily bins
    if opt.d:
        DAILY = True
    else:
        DAILY = False

    if opt.force_daily:
        FORCE_DAILY = True
        DAILY = True
    else:
        FORCE_DAILY = False

    # If custom thresholds
    if opt.c:
        USECUSTOMTHRESHOLD = True
    else:
        USECUSTOMTHRESHOLD = False

    # If no mail is sent
    if opt.n:
        MAIL = False
    else:
        MAIL = True

    # If test mode
    if opt.t:
        TEST = True
    else:
        TEST = False

    if TEST and not MAIL:
        logging.error("""You asked for both the --test and --no-mail options.
These options are mutually exclusive.""")
        sys.exit(1)

    # If long term
    if opt.l:
        LONGTERM = True
        # Check that we provided the mandatory argument: a source to process, and a month for which the long-term data should be produced !
        if len(args) != 2:
            logging.error("""Main: wrong number of arguments
              With the --long-term option, you should provide:
                - a source name
                - a yearmonth for which the long term data should be produced""")
            sys.exit(1)
        yearmonth = args[1]

    else:
        LONGTERM = False
        # Check that we provided the mandatory argument: a source to process !
        if len(args) != 1:
            logging.error('ERROR Main: wrong number of arguments')
            sys.exit(1)
        yearmonth = None

    # If merge long term light curves
    if opt.m:
        MERGELONGTERM = True
        LONGTERM = True
        # DAILY=False
        MAIL = False
        TEST = False
        STOPDAY = None
        # If update long term light curves with brand new data
        if opt.u:
            UPDATE = True
        else:
            UPDATE = False
        if opt.STOPMONTH is not None:
            STOPMONTH = str(opt.STOPMONTH)
        else:
            STOPMONTH = None
    else:
        MERGELONGTERM = False
        UPDATE = False
        STOPMONTH = None
        if opt.STOPDAY is not None:
            STOPDAY = str(opt.STOPDAY)
        else:
            STOPDAY = None

    # If dynamical flux trigger threshold based on source history
    if opt.history:
        WITHHISTORY = True
    else:
        WITHHISTORY = False

    src = args[0]

    processSrc(mysrc=src, useThresh=USECUSTOMTHRESHOLD, daily=DAILY, mail=MAIL, longTerm=LONGTERM, test=TEST,
               yearmonth=yearmonth, mergelongterm=MERGELONGTERM, withhistory=WITHHISTORY, update=UPDATE,
               configfile=CONFIGFILE, force_daily=FORCE_DAILY, stopmonth=STOPMONTH, stopday=STOPDAY,
               forcealert=FORCEALERT, log=LOG)

    return True


if __name__ == '__main__':
    """
    Execute main()
    """

    main()
